<UserControl
    x:Class="FalcaPOS.Store.Views.AddStoreFlyout"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:behavior="clr-namespace:FalcaPOS.Common.Behaviors;assembly=FalcaPOS.Common"
    xmlns:converters="clr-namespace:FalcaPOS.Common.Converters;assembly=FalcaPOS.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:fa="http://schemas.fontawesome.io/icons/"
    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
    xmlns:local="clr-namespace:FalcaPOS.Store.Views"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:Converter="clr-namespace:FalcaPOS.Common.Converters;assembly=FalcaPOS.Common"
    xmlns:prism="http://prismlibrary.com/"
    d:DesignHeight="450"
    d:DesignWidth="800"
    prism:ViewModelLocator.AutoWireViewModel="True"
    mc:Ignorable="d">
    <UserControl.Resources>
        <Style x:Key="stylelabel" TargetType="Label">
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="FontFamily" Value="{DynamicResource Poppins}"/>
            <Setter Property="Margin" Value="5 5 0 0"></Setter>
        </Style>
        <Style x:Key="IconMargin" TargetType="materialDesign:PackIcon">
            <Setter Property="Margin" Value="0,20,0,0" />
        </Style>
        <converters:ArrayToVisibilityConverter x:Key="ArrayToVisibilityConverter" />
        <converters:ArrayToVisibilityInverseConverter x:Key="ArrayToVisibilityInverseConverter" />
        <converters:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter" />
        <converters:RadioButtonConverter x:Key="RadioButtonConverter"/>
        <SolidColorBrush x:Key="MaterialCardColour" Color="#F5F5F5"/>
    </UserControl.Resources>
    <ScrollViewer AutomationProperties.AutomationId="addUserScrollId" 
        CanContentScroll="True"
        HorizontalScrollBarVisibility="Disabled"
        VerticalScrollBarVisibility="Auto">
        <Grid Margin="30,0,0,0">
            <Grid.RowDefinitions>
                <RowDefinition Height="50" />
                <RowDefinition Height="50" />
                <RowDefinition Height="50" />
                <RowDefinition Height="50" />
                <RowDefinition Height="50" />
                <RowDefinition Height="30" />
                <RowDefinition Height="*" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <StackPanel Grid.Row="0" Orientation="Horizontal">
                <TextBox
                    Width="200"
                    Margin="0 10 0 0"
                    materialDesign:HintAssist.Hint="Store Name *"
                    materialDesign:HintAssist.IsFloating="True"
                    AutomationProperties.AutomationId="txtOurStoreAddStoreStoreNameId"
                    Text="{Binding Path=Name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                <TextBox
                    Width="200"
                     Margin="10 10 0 0"
                    materialDesign:HintAssist.Hint="Phone Number *"
                    materialDesign:HintAssist.IsFloating="True"
                    AutomationProperties.AutomationId="txtOurStoreAddStorePhoneNumberId"
                    MaxLength="10"
                    Text="{Binding Path=Phone, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                    <i:Interaction.Behaviors>
                        <behavior:TextBoxInputRegExBehaviour EmptyValue="0" RegularExpression="^[0-9]*$" />
                    </i:Interaction.Behaviors>
                </TextBox>
                <TextBox
                    Width="200"
                    Margin="10 10 0 0"
                    materialDesign:HintAssist.Hint="Alternate Phone"
                    materialDesign:HintAssist.IsFloating="True"
                    AutomationProperties.AutomationId="txtOurStoreAddStoreAlternatePhoneId"
                    MaxLength="10"
                    Text="{Binding Path=Alternatephone, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                    <i:Interaction.Behaviors>
                        <behavior:TextBoxInputRegExBehaviour RegularExpression="^[0-9]*$" />
                    </i:Interaction.Behaviors>
                </TextBox>
            </StackPanel>
            <StackPanel Grid.Row="1" Orientation="Horizontal">
                <TextBox
                    Width="200"
                     Margin="0 10 0 0"
                    materialDesign:HintAssist.Hint="Email *"
                    materialDesign:HintAssist.IsFloating="True"
                    AutomationProperties.AutomationId="txtOurStoreAddStoreEmailId"
                    Text="{Binding Path=Email, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
            </StackPanel>
            <StackPanel Grid.Row="2" Orientation="Horizontal">
                <ComboBox
                    Width="200"
                    Margin="0 15 0 0"
                    materialDesign:HintAssist.Hint="Select State *"
                    materialDesign:TextFieldAssist.HasClearButton="True"
                    AutomationProperties.AutomationId="cmbOurStoreAddStoreSelectStateId"
                    DisplayMemberPath="Name"
                    ItemsSource="{Binding States, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    SelectedValue="{Binding SelectedState}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="SelectionChanged">
                            <prism:InvokeCommandAction Command="{Binding StateSelectionChanged}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </ComboBox>
                <ComboBox
                    Width="200"
                    Margin="10 15 0 0"
                    materialDesign:HintAssist.Hint="Select Zone *"
                    materialDesign:TextFieldAssist.HasClearButton="True"
                    AutomationProperties.AutomationId="cmbOurStoreAddStoreSelectZoneId"
                    DisplayMemberPath="Name"
                    ItemsSource="{Binding Zones, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    SelectedValue="{Binding SelectedZone}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="SelectionChanged">
                            <prism:InvokeCommandAction Command="{Binding ZoneSelectionChanged}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </ComboBox>
                <ComboBox
                    Width="200"
                    Margin="10 15 0 0"
                    materialDesign:HintAssist.Hint="Select Territory *"
                    materialDesign:TextFieldAssist.HasClearButton="True"
                    AutomationProperties.AutomationId="cmbOurStoreAddStoreSelectTerritoryId"
                    DisplayMemberPath="Name"
                    ItemsSource="{Binding Territories, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    SelectedValue="{Binding SelectedTerritory}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="SelectionChanged">
                            <prism:InvokeCommandAction Command="{Binding TerritorySelectionChanged}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </ComboBox>
            </StackPanel>
            <StackPanel Grid.Row="3" Orientation="Horizontal">
                <ComboBox
                    Width="200"
                    Margin="0 15 0 0"
                    materialDesign:HintAssist.Hint="Select District *"
                    materialDesign:TextFieldAssist.HasClearButton="True"
                    AutomationProperties.AutomationId="cmbOurStoreAddStoreSelectDistrictId"
                    DisplayMemberPath="Name"
                    ItemsSource="{Binding Districts, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    SelectedValue="{Binding SelectedDistrict}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="SelectionChanged">
                            <prism:InvokeCommandAction Command="{Binding DistrictSelectionChanged}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </ComboBox>
                <TextBox
                    Width="200"
                     Margin="10 10 0 0"
                    materialDesign:HintAssist.Hint="City *"
                    materialDesign:HintAssist.IsFloating="True"
                    AutomationProperties.AutomationId="txtOurStoreAddStoreCityId"
                    Text="{Binding Path=City, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                <TextBox
                    Width="200"
                     Margin="10 10 0 0"
                    materialDesign:HintAssist.Hint="Street"
                    materialDesign:HintAssist.IsFloating="True"
                    AutomationProperties.AutomationId="txtOurStoreAddStoreStreetId"
                    Text="{Binding Path=Street, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
            </StackPanel>
            <StackPanel Grid.Row="4" Orientation="Horizontal">
                <TextBox
                    Width="200"
                     Margin="0 10 0 0"
                    materialDesign:HintAssist.Hint="Pin Code *"
                    materialDesign:HintAssist.IsFloating="True"
                    AutomationProperties.AutomationId="txtOurStoreAddStorePincodeId"
                    MaxLength="6"
                    Text="{Binding Path=Pincode, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                    <i:Interaction.Behaviors>
                        <behavior:TextBoxInputRegExBehaviour EmptyValue="0" RegularExpression="^[0-9]*$" />
                    </i:Interaction.Behaviors>
                </TextBox>
                <TextBox
                    Width="85"
                    Margin="10 10 0 0"
                     VerticalAlignment="Center"
                    materialDesign:HintAssist.Hint="Invoice Format *"
                    materialDesign:HintAssist.IsFloating="True"
                    AutomationProperties.AutomationId="txtOurStoreAddStoreInvoiceFormatId"
                    IsReadOnly="True"
                    Text="{Binding Path=StoreInvoiceFormat, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                <TextBox
                    Width="115"
                    Margin="10 10 0 0"
                    VerticalAlignment="Center"
                    materialDesign:HintAssist.Hint="Invoice Sequence *"
                    materialDesign:HintAssist.IsFloating="True"
                    AutomationProperties.AutomationId="txtOurStoreAddStoreInvoiceSeqenceId"
                    Text="{Binding Path=StoreInvoiceSequence, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                    <i:Interaction.Behaviors>
                        <behavior:TextBoxInputRegExBehaviour EmptyValue="0" RegularExpression="^[0-9]*$" />
                    </i:Interaction.Behaviors>
                </TextBox>
                <RadioButton Content="F-Shop" Margin="10 20 0 0" Foreground="#333333" FontFamily="{DynamicResource Poppins}" AutomationProperties.AutomationId="rbEODDenominationId" IsChecked="{Binding IsStoreChecked,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"  Command="{Binding StoreTypeCommand}" CommandParameter="F-Shop" />
                <RadioButton Content="RSP" Margin="10 20 0 0" Foreground="#333333" FontFamily="{DynamicResource Poppins}" AutomationProperties.AutomationId="rbEODDenominationId"  Command="{Binding StoreTypeCommand}" CommandParameter="RSP" />
            </StackPanel>
            <!--<StackPanel Grid.Row="5" Orientation="Horizontal">   
            </StackPanel>
            <StackPanel Grid.Row="6" Orientation="Horizontal"> 
            </StackPanel>
            <StackPanel Grid.Row="7" Orientation="Horizontal"> 
            </StackPanel>
            <StackPanel Grid.Row="8" Orientation="Horizontal">               
            </StackPanel>
            <StackPanel Grid.Row="9" Orientation="Horizontal">                
            </StackPanel>
            <StackPanel Grid.Row="10" Orientation="Horizontal">               
            </StackPanel>
            <StackPanel Grid.Row="11" Orientation="Horizontal">               
            </StackPanel>-->
            <StackPanel Grid.Row="5" Grid.ColumnSpan="4" Orientation="Horizontal">
                <Label Margin="0,5,0,0"  FontWeight="Bold">Add Store License</Label>
                <Button Margin="5,5,0,0"  
                    HorizontalAlignment="Center"
                   AutomationProperties.AutomationId="btnAddStoreLicenseId"
                    Command="{Binding AddStoreLicenseCommand}"
                   Style="{StaticResource ActionButton}" 
                    ToolTip="Add Store License"                    
                    Visibility="{Binding StoreLicenses, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource ArrayToVisibilityInverseConverter}}">
                    <materialDesign:PackIcon Kind="Plus" />
                </Button>
            </StackPanel>

            <ItemsControl Grid.Row="6" Grid.ColumnSpan="4"  ItemsSource="{Binding StoreLicenses, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" >
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <StackPanel />
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <local:AddStoreLicense 
                                    AddStoreLicenseCommand="{Binding DataContext.AddStoreLicenseCommand, RelativeSource={RelativeSource AncestorType={x:Type local:AddStoreFlyout}}}"
                                    DataContext="{Binding Path=., Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                    RemoveAddStoreLicenseCommand="{Binding DataContext.RemoveAddStoreLicenseCommand, RelativeSource={RelativeSource AncestorType={x:Type local:AddStoreFlyout}}}" />
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>




            <StackPanel
                Grid.Row="15"
                Margin="0,15,15,0"
                Orientation="Horizontal">
                <Button
                    Width="80"
                    Margin="0,0,15,0"
                    HorizontalAlignment="Right"
                    AutomationProperties.AutomationId="btnOurStoreAddStoreAddId"
                    Command="{Binding AddStoreCommnad}"
                    Style="{StaticResource MaterialDesignRaisedDarkButton}">
                    Add
                </Button>
                <Button
                    Width="80"
                    HorizontalAlignment="Right"
                    AutomationProperties.AutomationId="btnOurStoreAddStoreResetId"
                    Command="{Binding ResetStoreCommnad}"
                    Style="{StaticResource MaterialDesignOutlinedButton}">
                    Reset
                </Button>

            </StackPanel>

        </Grid>
    </ScrollViewer>
</UserControl>
